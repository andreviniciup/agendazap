"""
Servi√ßo para gerenciamento de templates de mensagem
"""

from typing import Dict, List, Optional, Any
from sqlalchemy.orm import Session
from fastapi import HTTPException, status
import logging
from uuid import UUID

from app.models.user import User
from app.utils.enums import TemplateType
from app.services.cache_service import cache_service

logger = logging.getLogger(__name__)


class TemplateService:
    """Servi√ßo para opera√ß√µes relacionadas a templates de mensagem"""
    
    def __init__(self, db: Session):
        self.db = db
    
    def get_default_templates(self) -> Dict[str, Dict[str, str]]:
        """Obter templates padr√£o do sistema"""
        return {
            "appointment_confirmation": {
                "consultation": """Prezado(a) {client_name},

Sua consulta com {provider_name} foi confirmada para {date} √†s {time}.

Para d√∫vidas, responda esta mensagem.

Atenciosamente,
AgendaZap""",
                "service_table": """Oi {client_name}! üòä

Seu {service_name} ({price}) est√° agendado para {date} √†s {time}!

Para confirmar ou mudar, responda aqui.

AgendaZap"""
            },
            "appointment_reminder": {
                "consultation": """Lembrete: Sua consulta com {provider_name} √© amanh√£ √†s {time}.

Se precisar remarcar, avise.

Atenciosamente,
AgendaZap""",
                "service_table": """Ei {client_name}, amanh√£ √© seu {service_name} √†s {time}! üíÖ

Se precisar cancelar, me avise.

AgendaZap"""
            },
            "appointment_follow_up": {
                "consultation": """Ol√° {client_name},

Como foi sua sess√£o com {provider_name}?

Seu feedback √© importante. Responda aqui.

Obrigado,
AgendaZap""",
                "service_table": """E a√≠ {client_name}, gostou do {service_name}? ‚≠ê

D√™ uma nota ou agende novamente!

AgendaZap"""
            },
            "appointment_cancellation": {
                "consultation": """Prezado(a) {client_name},

Sua consulta com {provider_name} para {date} √†s {time} foi cancelada.

Para reagendar, entre em contato conosco.

Atenciosamente,
AgendaZap""",
                "service_table": """Oi {client_name},

Seu {service_name} para {date} √†s {time} foi cancelado.

Para reagendar, me chame aqui! üòä

AgendaZap"""
            }
        }
    
    def get_user_templates(
        self, 
        user: User, 
        use_cache: bool = True
    ) -> Dict[str, str]:
        """Obter templates personalizados do usu√°rio com cache"""
        try:
            # Tentar obter do cache primeiro
            if use_cache:
                cached_templates = cache_service.get_message_template(f"user_{user.id}")
                if cached_templates:
                    logger.debug(f"Templates obtidos do cache para usu√°rio {user.id}")
                    return cached_templates
            
            # Se n√£o est√° no cache, buscar do banco ou usar padr√µes
            # Por enquanto, vamos usar os templates padr√£o baseados no tipo do usu√°rio
            default_templates = self.get_default_templates()
            user_templates = {}
            
            for template_type, templates in default_templates.items():
                user_templates[template_type] = templates.get(
                    user.template_type.value, 
                    templates["consultation"]  # fallback
                )
            
            # Salvar no cache
            if use_cache:
                cache_service.set_message_template(f"user_{user.id}", user_templates)
                logger.debug(f"Templates salvos no cache para usu√°rio {user.id}")
            
            return user_templates
            
        except Exception as e:
            logger.error(f"Erro ao obter templates do usu√°rio: {e}")
            # Em caso de erro, retornar templates padr√£o
            default_templates = self.get_default_templates()
            return {
                template_type: templates.get("consultation", "")
                for template_type, templates in default_templates.items()
            }
    
    def get_template_by_type(
        self, 
        user: User, 
        template_type: str,
        use_cache: bool = True
    ) -> str:
        """Obter template espec√≠fico do usu√°rio"""
        try:
            user_templates = self.get_user_templates(user, use_cache)
            return user_templates.get(template_type, "")
            
        except Exception as e:
            logger.error(f"Erro ao obter template {template_type}: {e}")
            return ""
    
    def update_user_template(
        self, 
        user: User, 
        template_type: str, 
        template_content: str
    ) -> bool:
        """Atualizar template personalizado do usu√°rio"""
        try:
            # Por enquanto, vamos apenas invalidar o cache
            # Em uma implementa√ß√£o futura, salvar√≠amos no banco de dados
            
            # Invalidar cache de templates do usu√°rio
            cache_service.invalidate_template(f"user_{user.id}")
            
            logger.info(f"Template {template_type} atualizado para usu√°rio {user.email}")
            return True
            
        except Exception as e:
            logger.error(f"Erro ao atualizar template {template_type}: {e}")
            return False
    
    def render_template(
        self, 
        user: User, 
        template_type: str, 
        variables: Dict[str, Any],
        use_cache: bool = True
    ) -> str:
        """Renderizar template com vari√°veis"""
        try:
            template_content = self.get_template_by_type(user, template_type, use_cache)
            
            if not template_content:
                logger.warning(f"Template {template_type} n√£o encontrado para usu√°rio {user.id}")
                return ""
            
            # Substituir vari√°veis no template
            rendered_content = template_content
            for key, value in variables.items():
                placeholder = f"{{{key}}}"
                rendered_content = rendered_content.replace(placeholder, str(value))
            
            return rendered_content
            
        except Exception as e:
            logger.error(f"Erro ao renderizar template {template_type}: {e}")
            return ""
    
    def get_available_templates(self) -> List[Dict[str, str]]:
        """Obter lista de templates dispon√≠veis"""
        return [
            {
                "type": "appointment_confirmation",
                "name": "Confirma√ß√£o de Agendamento",
                "description": "Mensagem enviada quando um agendamento √© confirmado"
            },
            {
                "type": "appointment_reminder",
                "name": "Lembrete de Agendamento",
                "description": "Mensagem enviada 24h antes do agendamento"
            },
            {
                "type": "appointment_follow_up",
                "name": "Follow-up P√≥s-Atendimento",
                "description": "Mensagem enviada ap√≥s o atendimento"
            },
            {
                "type": "appointment_cancellation",
                "name": "Cancelamento de Agendamento",
                "description": "Mensagem enviada quando um agendamento √© cancelado"
            }
        ]
    
    def get_template_variables(self, template_type: str) -> List[Dict[str, str]]:
        """Obter vari√°veis dispon√≠veis para um tipo de template"""
        variables_map = {
            "appointment_confirmation": [
                {"name": "client_name", "description": "Nome do cliente"},
                {"name": "provider_name", "description": "Nome do provedor"},
                {"name": "service_name", "description": "Nome do servi√ßo"},
                {"name": "date", "description": "Data do agendamento"},
                {"name": "time", "description": "Hor√°rio do agendamento"},
                {"name": "price", "description": "Pre√ßo do servi√ßo (apenas para service_table)"}
            ],
            "appointment_reminder": [
                {"name": "client_name", "description": "Nome do cliente"},
                {"name": "provider_name", "description": "Nome do provedor"},
                {"name": "service_name", "description": "Nome do servi√ßo"},
                {"name": "time", "description": "Hor√°rio do agendamento"}
            ],
            "appointment_follow_up": [
                {"name": "client_name", "description": "Nome do cliente"},
                {"name": "provider_name", "description": "Nome do provedor"},
                {"name": "service_name", "description": "Nome do servi√ßo"}
            ],
            "appointment_cancellation": [
                {"name": "client_name", "description": "Nome do cliente"},
                {"name": "provider_name", "description": "Nome do provedor"},
                {"name": "service_name", "description": "Nome do servi√ßo"},
                {"name": "date", "description": "Data do agendamento"},
                {"name": "time", "description": "Hor√°rio do agendamento"}
            ]
        }
        
        return variables_map.get(template_type, [])
    
    def validate_template_content(self, template_content: str) -> Dict[str, Any]:
        """Validar conte√∫do do template"""
        errors = []
        warnings = []
        
        # Verificar se o template n√£o est√° vazio
        if not template_content.strip():
            errors.append("Template n√£o pode estar vazio")
        
        # Verificar se tem pelo menos uma vari√°vel
        if "{" not in template_content or "}" not in template_content:
            warnings.append("Template n√£o cont√©m vari√°veis din√¢micas")
        
        # Verificar vari√°veis malformadas
        import re
        malformed_vars = re.findall(r'\{[^}]*[^a-zA-Z_][^}]*\}', template_content)
        if malformed_vars:
            errors.append(f"Vari√°veis malformadas encontradas: {', '.join(malformed_vars)}")
        
        return {
            "is_valid": len(errors) == 0,
            "errors": errors,
            "warnings": warnings
        }
    
    def invalidate_user_templates(self, user_id: UUID) -> bool:
        """Invalidar cache de templates do usu√°rio"""
        try:
            cache_service.invalidate_template(f"user_{user_id}")
            logger.debug(f"Cache de templates invalidado para usu√°rio {user_id}")
            return True
        except Exception as e:
            logger.error(f"Erro ao invalidar cache de templates: {e}")
            return False



