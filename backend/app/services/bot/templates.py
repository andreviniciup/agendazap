"""
Templates com varia√ß√µes e placeholders
"""

from typing import Dict, List
import random
from datetime import datetime


def is_night(now: datetime) -> bool:
    hour = now.hour
    return hour < 8 or hour >= 20


def greeting_prefix(now: datetime) -> str:
    hour = now.hour
    if 5 <= hour < 12:
        return "Bom dia"
    if 12 <= hour < 18:
        return "Boa tarde"
    return "Boa noite"


VARIATIONS: Dict[str, Dict[str, List[str]]] = {
    "greeting": {
        "day": [
            "{prefix}, {first_name}! Tudo bem? Sou da {provider_name}. Como posso ajudar hoje?",
            "{prefix}, {first_name}! Posso listar servi√ßos, valores ou hor√°rios para voc√™?",
            "{prefix}! Aqui √© da {provider_name}. Deseja ver servi√ßos, pre√ßos ou disponibilidade?",
        ],
        "night": [
            "{prefix}, {first_name}! Tudo bem? Posso ajudar com servi√ßos, valores ou hor√°rios?",
            "{prefix}! Sou da {provider_name}. Quer ver servi√ßos ou pre√ßos?",
        ],
    },
    "availability": {
        "day": [
            "Perfeito! Tenho {time_options}. Qual fica melhor para voc√™?",
            "Tenho disponibilidade em {time_options}. Prefere algum hor√°rio?",
        ],
        "night": [
            "Amanh√£ tenho {time_options}. Posso reservar para voc√™?",
        ],
    },
    "price": {
        "day": [
            "{prefix}, {first_name}! O valor de {service_name} √© {price}. Posso te mostrar hor√°rios?",
            "{service_name} fica em {price}. Deseja que eu liste hor√°rios dispon√≠veis?",
        ],
        "night": [
            "{service_name} custa {price}. Posso te enviar hor√°rios amanh√£ cedo?",
        ],
    },
    "confirm": {
        "day": [
            "√ìtimo! Confirmo para {date} √†s {time}?",
            "Posso agendar {service_name} para {date} √†s {time}?",
        ],
        "night": [
            "Deixo reservado para {date} √†s {time}?",
        ],
    },
    "handoff": {
        "day": [
            "Entendi. Vou encaminhar para um profissional te responder rapidinho!",
            "Sem problemas! Vou te passar para um atendente que j√° te retorna.",
        ],
        "night": [
            "Vou encaminhar para um profissional e ele te retorna logo!",
        ],
    },
    "media_handoff": {
        "day": [
            "Recebi {media_type}! No momento n√£o consigo processar, ent√£o vou passar para um profissional, tudo bem?",
            "Vi que voc√™ enviou {media_type}. Vou encaminhar para um profissional analisar, ok?",
        ],
        "night": [
            "Recebi {media_type}. Vou passar para um profissional te responder amanh√£ cedo!",
        ],
    },
    "reminder": {
        "day": [
            "‚è∞ Oi {client_name}! Lembrando do seu hor√°rio de {service_name} em {date} √†s {time}. Nos vemos l√°!",
            "‚è∞ Ol√° {client_name}! Seu hor√°rio de {service_name} √© amanh√£ √†s {time}. At√© l√°!",
        ],
        "night": [
            "‚è∞ Oi {client_name}! Lembre-se: {service_name} amanh√£ √†s {time}!",
        ],
    },
    "confirmation_request": {
        "day": [
            "Oi {client_name}! Voc√™ confirma seu hor√°rio de {service_name} em {date} √†s {time}? Responda:\n1Ô∏è‚É£ Confirmo\n2Ô∏è‚É£ Preciso cancelar\n3Ô∏è‚É£ Reagendar",
            "Ol√° {client_name}! Confirma o {service_name} para {date} √†s {time}?\n1Ô∏è‚É£ Sim, confirmo\n2Ô∏è‚É£ Cancelar\n3Ô∏è‚É£ Mudar hor√°rio",
        ],
        "night": [
            "Oi {client_name}! Confirma {service_name} amanh√£ √†s {time}?\n1Ô∏è‚É£ Confirmo\n2Ô∏è‚É£ Cancelar\n3Ô∏è‚É£ Reagendar",
        ],
    },
    "feedback_request": {
        "day": [
            "Oi {client_name}! Como foi sua experi√™ncia com {service_name}? De 0 a 10, qual a chance de nos recomendar? Pode comentar algo que possamos melhorar? üòä",
            "Ol√° {client_name}! Gostou do {service_name}? Sua opini√£o √© muito importante! De 0 a 10, nos recomendaria? Conte o que achou! üí¨",
        ],
        "night": [
            "Oi {client_name}! Como foi o {service_name}? De 0 a 10, nos recomendaria? üòä",
        ],
    },
    "clarify": {
        "day": [
            "Voc√™ prefere que eu mostre hor√°rios ou valores do {service_name}?",
            "Prefere que eu te mostre pre√ßos ou hor√°rios agora?",
        ],
        "night": [
            "Quer pre√ßos ou hor√°rios do {service_name}?",
        ],
    },
    "about": {
        "day": [
            "{prefix}, {first_name}! Funciona assim: voc√™ escolhe o servi√ßo, eu mostro hor√°rios e confirmo. Quer ver servi√ßos ou hor√°rios?",
            "Nosso processo √© simples: escolher servi√ßo ‚Üí ver hor√°rios ‚Üí confirmar. Prefere come√ßar pelos servi√ßos?",
        ],
        "night": [
            "√â simples: servi√ßo, hor√°rios e confirma√ß√£o. Quer que eu liste os servi√ßos?",
        ],
    },
}


class _SafeDict(dict):
    def __missing__(self, key):
        return ""


def pick(intent: str, tone: str, **kwargs) -> str:
    variants = VARIATIONS.get(intent, {}).get(tone, [])
    if not variants:
        return ""
    template = random.choice(variants)
    # Preencher prefixo educado se n√£o fornecido
    if "prefix" not in kwargs:
        kwargs["prefix"] = greeting_prefix(datetime.utcnow())
    return template.format_map(_SafeDict(**kwargs))


