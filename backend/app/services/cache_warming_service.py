"""
Servi√ßo de Cache Warming Autom√°tico
Pr√©-aquece cache para usu√°rios ativos
"""

import asyncio
import logging
from typing import List, Dict, Any
from datetime import datetime, date, timedelta
from sqlalchemy.orm import Session
from sqlalchemy import and_, func

from app.database import SessionLocal
from app.models.user import User
from app.models.appointment import Appointment
from app.services.cache_service import cache_service
from app.services.appointment_service import AppointmentService
from app.services.service_service import ServiceService
from app.services.plan_service import PlanService

logger = logging.getLogger(__name__)


class CacheWarmingService:
    """Servi√ßo para aquecimento autom√°tico de cache"""
    
    def __init__(self):
        self.is_running = False
        self.warming_interval = 300  # 5 minutos
    
    async def start_warming_service(self):
        """Iniciar servi√ßo de aquecimento autom√°tico"""
        if self.is_running:
            logger.warning("Servi√ßo de cache warming j√° est√° rodando")
            return
        
        self.is_running = True
        logger.info("üöÄ Servi√ßo de cache warming iniciado")
        
        while self.is_running:
            try:
                await self.warm_active_users_cache()
                await asyncio.sleep(self.warming_interval)
            except Exception as e:
                logger.error(f"Erro no servi√ßo de cache warming: {e}")
                await asyncio.sleep(60)  # Aguardar 1 minuto em caso de erro
    
    def stop_warming_service(self):
        """Parar servi√ßo de aquecimento autom√°tico"""
        self.is_running = False
        logger.info("üõë Servi√ßo de cache warming parado")
    
    async def warm_active_users_cache(self):
        """Aquecer cache para usu√°rios ativos"""
        try:
            db = SessionLocal()
            try:
                # Buscar usu√°rios ativos (com agendamentos recentes ou futuros)
                active_users = self._get_active_users(db)
                
                logger.info(f"üî• Aquecendo cache para {len(active_users)} usu√°rios ativos")
                
                for user in active_users:
                    try:
                        await self._warm_user_cache(user, db)
                    except Exception as e:
                        logger.error(f"Erro ao aquecer cache do usu√°rio {user.id}: {e}")
                        continue
                
                logger.info(f"‚úÖ Cache aquecido para {len(active_users)} usu√°rios")
                
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"Erro ao aquecer cache de usu√°rios ativos: {e}")
    
    def _get_active_users(self, db: Session) -> List[User]:
        """Obter usu√°rios ativos baseado em agendamentos recentes"""
        try:
            # Buscar usu√°rios com agendamentos nos √∫ltimos 7 dias ou pr√≥ximos 30 dias
            seven_days_ago = datetime.utcnow() - timedelta(days=7)
            thirty_days_future = datetime.utcnow() + timedelta(days=30)
            
            active_user_ids = db.query(Appointment.user_id).filter(
                and_(
                    Appointment.start_time >= seven_days_ago,
                    Appointment.start_time <= thirty_days_future,
                    Appointment.is_cancelled == False
                )
            ).distinct().all()
            
            # Buscar usu√°rios
            user_ids = [user_id[0] for user_id in active_user_ids]
            if not user_ids:
                return []
            
            users = db.query(User).filter(User.id.in_(user_ids)).all()
            return users
            
        except Exception as e:
            logger.error(f"Erro ao buscar usu√°rios ativos: {e}")
            return []
    
    async def _warm_user_cache(self, user: User, db: Session):
        """Aquecer cache de um usu√°rio espec√≠fico"""
        try:
            plan_service = PlanService()
            appointment_service = AppointmentService(db, plan_service)
            service_service = ServiceService(db, plan_service)
            
            # Aquecer cache de servi√ßos
            services_data = service_service.get_user_services(user, use_cache=False)
            
            # Aquecer cache de agenda para pr√≥ximos 7 dias
            agenda_data = {}
            today = date.today()
            
            for i in range(7):
                target_date = today + timedelta(days=i)
                try:
                    agenda = appointment_service.get_user_agenda(user, target_date, use_cache=False)
                    agenda_data[target_date.isoformat()] = agenda
                except Exception as e:
                    logger.warning(f"Erro ao obter agenda para {target_date}: {e}")
                    agenda_data[target_date.isoformat()] = {
                        "date": target_date.isoformat(),
                        "appointments": [],
                        "total_appointments": 0,
                        "available_slots": []
                    }
            
            # Aquecer cache usando o servi√ßo de cache
            success = cache_service.warm_user_cache(
                user.id, 
                agenda_data, 
                services_data
            )
            
            if success:
                logger.debug(f"Cache aquecido para usu√°rio {user.id}")
            else:
                logger.warning(f"Falha ao aquecer cache para usu√°rio {user.id}")
                
        except Exception as e:
            logger.error(f"Erro ao aquecer cache do usu√°rio {user.id}: {e}")
    
    async def warm_specific_user_cache(self, user_id: str) -> bool:
        """Aquecer cache de um usu√°rio espec√≠fico por ID"""
        try:
            db = SessionLocal()
            try:
                user = db.query(User).filter(User.id == user_id).first()
                if not user:
                    logger.warning(f"Usu√°rio {user_id} n√£o encontrado")
                    return False
                
                await self._warm_user_cache(user, db)
                return True
                
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"Erro ao aquecer cache do usu√°rio {user_id}: {e}")
            return False
    
    async def warm_high_priority_users(self):
        """Aquecer cache para usu√°rios de alta prioridade (planos pagos)"""
        try:
            db = SessionLocal()
            try:
                # Buscar usu√°rios com planos pagos
                high_priority_users = db.query(User).filter(
                    User.plan_type.in_(['starter', 'pro', 'enterprise'])
                ).all()
                
                logger.info(f"üî• Aquecendo cache para {len(high_priority_users)} usu√°rios de alta prioridade")
                
                for user in high_priority_users:
                    try:
                        await self._warm_user_cache(user, db)
                    except Exception as e:
                        logger.error(f"Erro ao aquecer cache do usu√°rio {user.id}: {e}")
                        continue
                
                logger.info(f"‚úÖ Cache aquecido para {len(high_priority_users)} usu√°rios de alta prioridade")
                
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"Erro ao aquecer cache de usu√°rios de alta prioridade: {e}")
    
    def get_warming_stats(self) -> Dict[str, Any]:
        """Obter estat√≠sticas do servi√ßo de warming"""
        return {
            "is_running": self.is_running,
            "warming_interval": self.warming_interval,
            "cache_metrics": cache_service.get_metrics(),
            "cache_info": cache_service.get_cache_info()
        }


# Inst√¢ncia global do servi√ßo de warming
cache_warming_service = CacheWarmingService()


async def start_cache_warming():
    """Fun√ß√£o para iniciar o servi√ßo de warming"""
    await cache_warming_service.start_warming_service()


def stop_cache_warming():
    """Fun√ß√£o para parar o servi√ßo de warming"""
    cache_warming_service.stop_warming_service()



