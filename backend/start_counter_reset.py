#!/usr/bin/env python3
"""
Script para iniciar o servi√ßo de reset autom√°tico de contadores
"""

import asyncio
import logging
import signal
import sys
from app.dependencies import get_redis
from app.services.counter_reset_service import counter_reset_service

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def main():
    """Fun√ß√£o principal"""
    try:
        logger.info("üöÄ Iniciando servi√ßo de reset autom√°tico de contadores...")
        
        # Obter cliente Redis
        redis_client = await get_redis()
        if not redis_client:
            logger.error("‚ùå Redis n√£o dispon√≠vel, n√£o √© poss√≠vel iniciar o servi√ßo")
            sys.exit(1)
        
        # Configurar servi√ßo
        counter_reset_service.redis = redis_client
        
        # Iniciar agendador
        await counter_reset_service.start_monthly_reset_scheduler()
        
        logger.info("‚úÖ Servi√ßo de reset autom√°tico iniciado com sucesso!")
        
        # Manter o script rodando
        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("üõë Recebido sinal de interrup√ß√£o, parando servi√ßo...")
        finally:
            await counter_reset_service.stop_monthly_reset_scheduler()
            logger.info("‚úÖ Servi√ßo parado com sucesso!")
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar servi√ßo: {e}")
        sys.exit(1)


def signal_handler(signum, frame):
    """Handler para sinais do sistema"""
    logger.info(f"üõë Recebido sinal {signum}, parando servi√ßo...")
    sys.exit(0)


if __name__ == "__main__":
    # Configurar handlers de sinal
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # Executar
    asyncio.run(main())
